/* comentarios se escriben con el palito torcido(/) y con un asterisco consecutivamente (*) ejemplo: /* y se cierra con un palito (/) y asterisco (*) */

/*Regla css*/

body{
	background: red;
}

/*El body es el "selector" esta antes de las llaves. 
Lo que esta entre {} es el bloque de declaracion,
Y cada linea dentro de este se llama declaracion.
y cada declaracion tiene una propiedad que esta a la izquierda de los dos puntos y un valor que esta despues de los dos puntos, ejemplo:
backgraund(propiedad):red(valor);.

*/

/*-----------------------------------*/

/*--Variables CSS--*/

Variable: Es un lugar donde almacenas un valor para poder reutilizarlo.

¿para que nos seria util?

Que tal que tenemos una hoja donde tenemos un valor repetido por ejemplo un color:

body {
	background: red; <--
}

h1 {
	background: #fff;
	color: red; <---
}

y por cuestion de un pedido o estetica quisieramos cambiar ese color en TODO una hoja de estilos seria un trabajo muy tedioso cambiarlo letra por letra, para eso tenemos las "Variables Css"

ejemplo:

:root {
	--color: red;
}
 y la usamos sustituyendo el valor por nuestra variable en este caso --color.

 body {
	background: var(--color); <--
}

h1 {
	background: #fff;
	color: var(--color); <---
}



/*-------------------------------------*/

/-*---------Selectores(actualmente esta en level 3)----------*-/
Para dominar CSS debes entender: Selectores, especificidad, herencia y cascada.


/*-------------selectores del tipo "Sencillos:"--------------------*/
Elementos o tipo- html o xml
Son los basicos

<h1>Hola soy un titulo</h1>

h1 {
	background: yellow;
}

Solo llama a el nombre de la etiqueta y ya.
Solo hacen mencion a una sola palabra.

/*selectores de clase*/
<h1 class="title">hola, soy un title :v</h1>

.title {
	background: red;
}

son selectores que hacen mencion a una clase en nuestro html.
nos puede ayudar a evitar repetir declaraciones de código en css solo creando una clase y llamandola en html. eje:

<h1 class="title center"> hola mundo</h1>
<p class="descripcion bold center">este es mi parrafo</p>

.title {
	background: red;
}

.descripcion {
	background: green;
}

.center {
	text-align: center;
}

.bold {
	font-weight: bold;
}

No se puede crear una clase empezando con un numero y se pueden tambien utilizar los emojis para crear tambien clases(siempre y cuando sea emojis standars(unicode)).

/*selectores de ID*/

es un identificador unico que no se va a repetir y solo se usa una ves, solo se recomienda utilizar para javascript porque son unicos. Se indica con solo un # en lugar un "." .

<h1 id="uno"> hola mundo</h1>

#uno{
	background: red;
}

/*selector Universal*/

Tipo de selector que seleciona TODO, se escribe con un *.
<p> hola </p>

* {
	color: red;
}

Solo se recomienda si sabes muy bien lo que estas haciendo xd.

/*selectores case sensitive y case insensitive */

-Los selectores son caso insensitive, es decir no les importa si estan en mayuscula o en minuscula, pero al que si le importa es a html y xml.
Los tags en html son insensitive y los atrubutos son caso case sensitive, es decir que si le importa si esta en mayuscula o no.
ejemplo:

<p class="parrafo">hola mundito</p>

p {
	color: green;
}

.Parrafo{
	background: yellow;
} /*como la clase esta en mayuscula esta no se aplicaria en html*/

en otras palabras si escribes una etiqueta ya sea en mayuscula o minuscola en css este si se modificara pero si esta etiqueta tiene una clase( que es un atributo) y esta esta en mayuscula esta no se midificara ya que es un atributo atribuido a la etiqueta en html.


/*--------------selectores del tipo "Compuestos:"------------------*/
 Esto se refiere cuando hay mas de un selector y juntos hacen un selector diferente.
  el mas sencillo es con "," 
  /*selectores agrupados*/ ejemplo:

  <h1 class="title">Soy un titulo</h1>
  <p class="parrafo">parrafito</h1>

  .title,
  .parrafo {
  	color: red;
  }

 /*Nota: se recomienda que cuando agrupes selectores lo pongas en lineas diferentes como en el ejemplo anterior*/

 /*Selectores descendientes*/

Indica cuando es un elemento dentro de otro.

<ul class="list">
	<li class="list-item"> item 1</li>
	<li class="list-item"> item 1</li>
	<li class="list-item"> item 1</li>
</ul>

.list .list-item {
	color: red;
}

esto indica que todas las etiquetas con la clase list-item dentro de la clase .list seran de color rojo.
esto no es util ni practico ya que con el simple hecho de hacer mecion de una clase especifica nos ahorramos hacer la mencion en forma de descendencia, solo se recomiendo si es muy forzoso hacer una mecion directa dentro del selector.


/*selector hijo directo*/

es basicamente lo que menciona es hacer mencion del hijo directo de culquier selector.

<ul class="list">
	<li class="list-item"> item 1</li>
	<li class="list-item"> item 1</li>
	<li class="list-item"> item 1
		<ul>
			<li> subitem </li>
			<li> subitem </li>
			<li> subitem </li>
		</ul>
	</li>
</ul>

li >  ul {
  display: none;
}

li:hover ul {
  display: block;
}

solo es util si queremos hacer mencion a un hijo(tag) del misma clase. Si utilizamos el > para hacer una mencion de una etiqueta o clase etc etc y esta No es directa no funcionara lo declarado hacia este mismo.

/*selector hermano siguiente*/

Selecciona al el elemento que esta despues de otro elemento.


<h1 class="title-1">Titulo</h1>
<p class="subtitle">subtitulo de h1</p>

<h2 class="title-2">Titulo</h2>
<pclass="subtitle">subtitulo de h2</p>

.title-1  {
	color: red;
}

.title-2 {
	color: blue;
}

Que pasaria si quisieramos poner de color no solo el title si no tambien su subtitle, utilizando los selectores de grupo anteriores no nos servirian, para ello esta este selector "+"

.title-1 + .subtitle {

	color: red;
}


.title-2 + .subtitle {
	color: blue;
}
con esto nuestro titles y subtitles correspondientes cambiarian del mismo color correspondiente.

y un ejemplo del eso de estos con una variable seria:
:root {

	--color-subtitle: blue;
}

.title-1 + .subtitle {

	color: var(--color-subtitle);
}


.title-2 + .subtitle {
	color: var(--color-subtitle);
}

/*selector "hermanos siguientes"*/

Los hermanos siguientes sirven para relacionar no solo con el siguiente selector si no tambien con los demas que se mencionan en la misma hermandad xd. 
ejemplo:

	<h1>Css desde cero- Clase 1- EDTeam</h1>
	<hr>
	<p class="hermano-mayor">Hola</p>
	<p class="hermano">Hola</p>
	<p>Hola</p>
	<p class="hermano">Hola</p>
	<p>Hola</p>
	<p class="hermano">Hola</p>
	<p>Hola</p>

	.hermano-mayor ~ .hermano {
	background: yellow;
}

con la tilde (~) que se teclea con "Alt Gr" sirve para no solo referirse al sig hermano si no a todos siempre y cuando sean hermanos.

/*selector de atributo*/

Selecciona por cualquier atributo que no sea una class o una id y todos se encierran en corchetes []
la forma mas sencilla es  [attr="value"] ygual que en HTML pero con los corchetes.
el Caso mas clasico para ese seria los input de email, ejemplo:


	<input type="email" name="email">
	<input type="date" name="fecha" required>
	<input type="submit" name="enviar" value="enviar">

[type="email"] {
	border: 1px solid blue;
}

[type="submit"] {
	background: red;
	color: #fff;

}

[required] {
	border: 2px solid red;
	margin: .5em;
}


/*Selector de atributo comienza con*/

Son selectores que al igual que el de atributo anterior pero con la habilidad de seleccionar los que comiencen con sierto valor 
[attr^="value"]
    <a href="/index.html">Inicio</a>
    <a href="https://youtube.com">Inicio</a>
    <a href="https://facebook.com">Inicio</a>

[href^=""],
[href^="https://"] {
 color: red;	
}

/*Selector de atributo termina con*/
Lo mismo que el aterior pero en lugar de comparar el primer valor compara el final de este.
[attr$="value"]
por ejemplo podemos aplicar que los enlaces que terminen con la terminacion .pdf se coloque una imagen de icono png de un pdf de fondo.
<a href="https/doc.www/doc.pdf">doc </a>
 
 [href$=".pdf"] {
 	background: url(../imagen.png);
 }
/*Selector de atributo que contiene*/

Que contiene en cualquier lugar.
[attr*="value"]

ejemplo:

<a href="#" class="button-alert"> Alerta</a>
<a href="#" class="button-cta">Dale like</a>

[class*="button-"] {
	display: inline-block;
	margin: 1em;
	padding: 1em 2em;
}

esto basicamente indica que los atributos de button-alert y button-cta compartirar las declaraciones del bloque de button- ya que el este tipo de selector identifica que valores tiene el atributo ya sea en parte o completamente. Esto puedo servir para evitar hacer muchas clases con la misma denominacion eneste caso seria button.




/*-----------------------------------------------------------------*/
/-*---------Selectores(Fin)----------*-/

